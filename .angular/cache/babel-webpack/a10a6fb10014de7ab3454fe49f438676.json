{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-webstorage\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient, localStorage) {\n      this.httpClient = httpClient;\n      this.localStorage = localStorage;\n      this.loggedIn = new EventEmitter();\n      this.username = new EventEmitter();\n      this.role = new EventEmitter();\n      this.admin = new EventEmitter();\n      this.user = new EventEmitter();\n      this.depotcode = new EventEmitter();\n      this.refreshTokenPayload = {\n        refreshToken: this.getRefreshToken(),\n        username: this.getUserName(),\n        role: this.getRole()\n      };\n    }\n\n    signup(signupRequestPayload) {\n      return this.httpClient.post('http://localhost:8080/api/users/signup', signupRequestPayload, {\n        responseType: 'text'\n      }).pipe(map(data => {\n        return true;\n      }));\n    }\n\n    login(loginRequestPayload) {\n      return this.httpClient.post('http://localhost:8080/api/users/login', loginRequestPayload).pipe(map(data => {\n        this.localStorage.store('authenticationToken', data.authenticationToken);\n        this.localStorage.store('username', data.username);\n        this.localStorage.store('refreshToken', data.refreshToken);\n        this.localStorage.store('expiresAt', data.expiresAt);\n        this.localStorage.store('role', data.role);\n        this.username.emit(data.username);\n        this.role.emit(data.role);\n        return true;\n      }));\n    }\n\n    getCurrentUser() {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: 'Basic '\n      });\n      return this.httpClient.get('http://localhost:8080/api/users/currentuser').pipe(map(data => {\n        this.localStorage.store('username', data.username);\n        this.localStorage.store('firstName', data.firstName);\n        this.localStorage.store('lastName', data.lastName);\n        this.localStorage.store('email', data.email);\n        this.localStorage.store('depotCode', data.depot.depotCode);\n        this.localStorage.store('city', data.depot.city);\n      }));\n    }\n\n    getCurrentLoggedInUser() {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: 'Basic '\n      });\n      return this.httpClient.get('http://localhost:8080/api/users/currentuser');\n    }\n\n    getDepotCode() {\n      return this.localStorage.retrieve('depotCode');\n    }\n\n    getFirstName() {\n      return this.localStorage.retrieve('firstName');\n    }\n\n    getLastName() {\n      return this.localStorage.retrieve('lastName');\n    }\n\n    getEmail() {\n      return this.localStorage.retrieve('email');\n    }\n\n    getCity() {\n      return this.localStorage.retrieve('city');\n    }\n\n    getJwtToken() {\n      return this.localStorage.retrieve('authenticationToken');\n    }\n\n    getRole() {\n      return this.localStorage.retrieve('role');\n    }\n\n    refreshToken() {\n      return this.httpClient.post('http://localhost:8080/api/users/refresh/token', this.refreshTokenPayload).pipe(tap(response => {\n        this.localStorage.store('role', response.role);\n        this.localStorage.store('authenticationToken', response.authenticationToken);\n        this.localStorage.store('expiresAt', response.expiresAt);\n      }));\n    }\n\n    logout() {\n      this.httpClient.post('http://localhost:8080/api/users/logout', this.refreshTokenPayload, {\n        responseType: 'text'\n      }).subscribe(data => {\n        console.log(data);\n      }, error => {\n        throwError(error);\n      });\n      this.localStorage.clear('authenticationToken');\n      this.localStorage.clear('username');\n      this.localStorage.clear('refreshToken');\n      this.localStorage.clear('expiresAt');\n      this.localStorage.clear('role');\n    }\n\n    getUserName() {\n      return this.localStorage.retrieve('username');\n    }\n\n    getRefreshToken() {\n      return this.localStorage.retrieve('refreshToken');\n    }\n\n    isLoggedIn() {\n      return this.getJwtToken() != null;\n    }\n\n    isAdmin() {\n      return this.getRole() === 'admin';\n    }\n\n    isNull() {\n      return this.getRole() != null;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}