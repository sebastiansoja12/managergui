{"ast":null,"code":"import { Component, ChangeDetectionStrategy, ElementRef, Renderer2, Input, ɵɵdefineInjectable, Injectable, NgModule } from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"*\"];\n\nfunction ProgressbarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"bar\", 3);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"type\", ctx_r2.type)(\"value\", ctx_r2._value)(\"max\", ctx_r2.max)(\"animate\", ctx_r2.animate)(\"striped\", ctx_r2.striped);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_3_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"bar\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"type\", item_r6.type)(\"value\", item_r6.value)(\"max\", item_r6.max)(\"animate\", ctx_r5.animate)(\"striped\", ctx_r5.striped);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(item_r6.label);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ProgressbarComponent_ng_template_3_bar_0_Template, 2, 6, \"bar\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4._values);\n  }\n}\n\nlet BarComponent = /*#__PURE__*/(() => {\n  class BarComponent {\n    constructor(el, renderer) {\n      this.el = el;\n      this.renderer = renderer;\n      /** maximum total value of progress element */\n\n      this.max = 100;\n      /** current value of progress bar */\n\n      this.value = 0;\n      /** if `true` changing value of progress bar will be animated */\n\n      this.animate = false;\n      /** If `true`, striped classes are applied */\n\n      this.striped = false;\n      /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n\n      this.type = 'info';\n      this.percent = 100;\n    }\n\n    get isBs3() {\n      return isBs3();\n    }\n\n    ngOnChanges(changes) {\n      var _a;\n\n      if (changes.value || changes.max) {\n        this.percent = 100 * (Number(changes.value.currentValue || 0) / Number(((_a = changes.max) === null || _a === void 0 ? void 0 : _a.currentValue) || this.max || 100));\n      }\n\n      if (changes.type) {\n        this.applyTypeClasses();\n      }\n    }\n\n    applyTypeClasses() {\n      if (this._prevType) {\n        const barTypeClass = `progress-bar-${this._prevType}`;\n        const bgClass = `bg-${this._prevType}`;\n        this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n        this.renderer.removeClass(this.el.nativeElement, bgClass);\n        this._prevType = void 0;\n      }\n\n      if (this.type) {\n        const barTypeClass = `progress-bar-${this.type}`;\n        const bgClass = `bg-${this.type}`;\n        this.renderer.addClass(this.el.nativeElement, barTypeClass);\n        this.renderer.addClass(this.el.nativeElement, bgClass);\n        this._prevType = this.type;\n      }\n    }\n\n  }\n\n  BarComponent.ɵfac = function BarComponent_Factory(t) {\n    return new (t || BarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  BarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarComponent,\n    selectors: [[\"bar\"]],\n    hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\"],\n    hostVars: 15,\n    hostBindings: function BarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.percent ? ctx.percent.toFixed(0) + \"%\" : \"\")(\"aria-valuemax\", ctx.max);\n        ɵngcc0.ɵɵstyleProp(\"height\", \"100\", \"%\")(\"width\", ctx.percent, \"%\");\n        ɵngcc0.ɵɵclassProp(\"progress-bar\", true)(\"progress-bar-animated\", !ctx.isBs3 && ctx.animate)(\"progress-bar-striped\", ctx.striped)(\"active\", ctx.isBs3 && ctx.animate);\n      }\n    },\n    inputs: {\n      max: \"max\",\n      value: \"value\",\n      animate: \"animate\",\n      striped: \"striped\",\n      type: \"type\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function BarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return BarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ProgressbarConfig = /*#__PURE__*/(() => {\n  class ProgressbarConfig {\n    constructor() {\n      /** if `true` changing value of progress bar will be animated */\n      this.animate = false;\n      /** maximum total value of progress element */\n\n      this.max = 100;\n    }\n\n  }\n\n  ProgressbarConfig.ɵfac = function ProgressbarConfig_Factory(t) {\n    return new (t || ProgressbarConfig)();\n  };\n\n  ProgressbarConfig.ɵprov = ɵɵdefineInjectable({\n    factory: function ProgressbarConfig_Factory() {\n      return new ProgressbarConfig();\n    },\n    token: ProgressbarConfig,\n    providedIn: \"root\"\n  });\n  return ProgressbarConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ProgressbarComponent = /*#__PURE__*/(() => {\n  class ProgressbarComponent {\n    constructor(config) {\n      /** maximum total value of progress element */\n      this.max = 100;\n      /** if `true` changing value of progress bar will be animated */\n\n      this.animate = false;\n      /** If `true`, striped classes are applied */\n\n      this.striped = false;\n      this.isStacked = false;\n      this._value = 0;\n      Object.assign(this, config);\n    }\n    /** current value of progress bar. Could be a number or array of objects\r\n     * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\r\n     */\n\n\n    set value(value) {\n      this.isStacked = Array.isArray(value);\n\n      if (typeof value === 'number') {\n        this._value = value;\n        this._values = void 0;\n      } else {\n        this._value = void 0;\n        this._values = value;\n      }\n    }\n\n  }\n\n  ProgressbarComponent.ɵfac = function ProgressbarComponent_Factory(t) {\n    return new (t || ProgressbarComponent)(ɵngcc0.ɵɵdirectiveInject(ProgressbarConfig));\n  };\n\n  ProgressbarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ProgressbarComponent,\n    selectors: [[\"progressbar\"]],\n    hostVars: 3,\n    hostBindings: function ProgressbarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"max\", ctx.max);\n        ɵngcc0.ɵɵclassProp(\"progress\", true);\n      }\n    },\n    inputs: {\n      max: \"max\",\n      animate: \"animate\",\n      striped: \"striped\",\n      value: \"value\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 5,\n    vars: 3,\n    consts: [[4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"NotStacked\", \"\"], [\"Stacked\", \"\"], [3, \"type\", \"value\", \"max\", \"animate\", \"striped\"], [3, \"type\", \"value\", \"max\", \"animate\", \"striped\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function ProgressbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ProgressbarComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, ProgressbarComponent_ng_template_1_Template, 2, 5, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(3, ProgressbarComponent_ng_template_3_Template, 1, 1, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(2);\n\n        const _r3 = ɵngcc0.ɵɵreference(4);\n\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isStacked)(\"ngIfThen\", _r1)(\"ngIfElse\", _r3);\n      }\n    },\n    directives: [ɵngcc1.NgIf, BarComponent, ɵngcc1.NgForOf],\n    styles: [\"[_nghost-%COMP%] {\\n      width: 100%;\\n      display: flex;\\n    }\"],\n    changeDetection: 0\n  });\n  return ProgressbarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ProgressbarModule = /*#__PURE__*/(() => {\n  class ProgressbarModule {\n    static forRoot() {\n      return {\n        ngModule: ProgressbarModule,\n        providers: []\n      };\n    }\n\n  }\n\n  ProgressbarModule.ɵfac = function ProgressbarModule_Factory(t) {\n    return new (t || ProgressbarModule)();\n  };\n\n  ProgressbarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ProgressbarModule\n  });\n  ProgressbarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ProgressbarModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressbarModule, {\n    declarations: function () {\n      return [BarComponent, ProgressbarComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [BarComponent, ProgressbarComponent];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BarComponent, ProgressbarComponent, ProgressbarConfig, ProgressbarModule }; //# sourceMappingURL=ngx-bootstrap-progressbar.js.map","map":null,"metadata":{},"sourceType":"module"}