{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, switchMap, take, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth/service/auth.service\"; // @ts-ignore\n\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n      this.isTokenRefreshing = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n    }\n\n    intercept(req, next) {\n      if (req.url.indexOf('refresh') !== -1 || req.url.indexOf('login') !== -1) {\n        return next.handle(req);\n      }\n\n      const jwtToken = this.authService.getJwtToken();\n\n      if (jwtToken) {\n        return next.handle(this.addToken(req, jwtToken)).pipe(catchError(error => {\n          if (error instanceof HttpErrorResponse && error.status === 403) {\n            return this.handleAuthErrors(req, next);\n          } else {\n            return throwError(error);\n          }\n        }));\n      }\n\n      return next.handle(req);\n    }\n\n    handleAuthErrors(req, next) {\n      if (!this.isTokenRefreshing) {\n        this.isTokenRefreshing = true;\n        this.refreshTokenSubject.next(null);\n        return this.authService.refreshToken().pipe(switchMap(refreshTokenResponse => {\n          this.isTokenRefreshing = false;\n          this.refreshTokenSubject.next(refreshTokenResponse.authenticationToken);\n          return next.handle(this.addToken(req, refreshTokenResponse.authenticationToken));\n        }));\n      } else {\n        return this.refreshTokenSubject.pipe(filter(result => result !== null), take(1), switchMap(res => {\n          return next.handle(this.addToken(req, this.authService.getJwtToken()));\n        }));\n      }\n    } // tslint:disable-next-line:typedef\n\n\n    addToken(req, jwtToken) {\n      return req.clone({\n        headers: req.headers.set('Authorization', 'Bearer ' + jwtToken)\n      });\n    }\n\n  }\n\n  TokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  TokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}